@startuml Econo-me Backend Architecture
skinparam backgroundColor white
skinparam componentStyle uml2
skinparam packageStyle rectangle
skinparam componentBackgroundColor #FEFECE
skinparam databaseBackgroundColor #DDDDDD

title Econo-me Backend Architecture

package "Backend (Node.js/Express)" {
  ' Server components
  component "Express Server (app.js)" as ExpressApp
  
  package "Routes" {
    component "API Routes" as ApiRoutes
    component "Auth Routes" as AuthRoutes
  }
  
  ' Controllers
  package "Controllers" {
    component "Auth Controller" as AuthController
    component "Expense Controller" as ExpenseController
  }
  
  ' Middleware
  package "Middleware" {
    component "Auth Middleware" as AuthMiddleware
  }
  
  ' Services
  package "Services" {
    component "Econome Service" as EconomeService
  }
  
  ' Models
  package "Models" {
    component "User Model" as UserModel
    component "Expense Model" as ExpenseModel
    component "Budget Model" as BudgetModel
    component "Income Model" as IncomeModel
    component "SavingsGoal Model" as SavingsModel
  }
  
  ' Database
  database "PostgreSQL" as DB {
    [users]
    [expenses]
    [budgets]
    [incomes]
    [savings_goals]
  }
  
  ' Utilities
  package "Utilities" {
    component "Database Connection" as DBConn
  }
  
  ' External libraries
  component [Express] as ExpressLib
  component [Sequelize] as Sequelize
  component [JWT] as JWT
  component [bcrypt] as Bcrypt
  component [pg (node-postgres)] as PG
}

' Backend relationships
ExpressApp --> ApiRoutes : mounts
ExpressApp --> AuthRoutes : mounts
ExpressApp --> ExpressLib : instantiates

ApiRoutes --> ExpenseController : delegates to
AuthRoutes --> AuthController : delegates to
ApiRoutes --> AuthMiddleware : uses

AuthController --> UserModel : manipulates
AuthController --> JWT : generates/verifies tokens
AuthController --> Bcrypt : hashes passwords

ExpenseController --> ExpenseModel : manipulates
ExpenseController --> BudgetModel : manipulates
ExpenseController --> IncomeModel : manipulates
ExpenseController --> SavingsModel : manipulates
ExpenseController --> EconomeService : uses

UserModel --> DB : queries
ExpenseModel --> DB : queries
BudgetModel --> DB : queries
IncomeModel --> DB : queries
SavingsModel --> DB : queries

UserModel --> Sequelize : extends
ExpenseModel --> Sequelize : extends
BudgetModel --> Sequelize : extends
IncomeModel --> Sequelize : extends
SavingsModel --> Sequelize : extends

DBConn --> DB : connects
DBConn --> PG : uses

@enduml