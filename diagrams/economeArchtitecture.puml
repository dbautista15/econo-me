@startuml Econo-me System Architecture

' Define styles to make the diagram more readable
skinparam handwritten false
skinparam monochrome false
skinparam componentStyle uml2
skinparam packageStyle rectangle
skinparam backgroundColor white
skinparam arrowColor black
skinparam componentBackgroundColor #FEFECE
skinparam packageBackgroundColor #FEFECE
skinparam databaseBackgroundColor #DDDDDD
skinparam interfaceBackgroundColor #DDDDDD
skinparam nodeBackgroundColor #DDDDDD

' Define the major components of the system
title Econo-me Financial Management System Architecture

' System boundary
package "Econo-me System" {
  ' Frontend package
  package "Frontend (React)" {
    component "App.js" as AppJS
    component "Router" as Router
    
    ' Main UI Components
    package "UI Components" {
      component "Dashboard" as DashboardComp
      component "ExpenseTracker" as ExpenseTrackerComp
      component "IncomeGoals" as IncomeGoalsComp
      component "Layout Components" as LayoutComps
      component "Login/Registration" as AuthComps
      component "Charts" as ChartsComp
      component "DataCleanup" as CleanupComp
    }
    
    ' Frontend services
    package "Services & Utilities" {
      component "AuthContext" as AuthCtx
      component "API Service" as APIService
      component "Storage Utils" as StorageUtils
      component "Helper Functions" as HelperFuncs
    }
  }
  
  ' Backend package
  package "Backend (Node.js/Express)" {
    ' Server components
    component "Express Server (app.js)" as ExpressApp
    component "Routes" as Routes
    
    ' Controllers
    package "Controllers" {
      component "Auth Controller" as AuthController
      component "Expense Controller" as ExpenseController
    }
    
    ' Middleware
    package "Middleware" {
      component "Auth Middleware" as AuthMiddleware
    }
    
    ' Services
    package "Services" {
      component "Econome Service" as EconomeService
    }
    
    ' Models
    package "Models" {
      component "User Model" as UserModel
      component "Expense Model" as ExpenseModel
      component "Budget Model" as BudgetModel
      component "Income Model" as IncomeModel
      component "SavingsGoal Model" as SavingsModel
    }
    
    ' Database
    database "PostgreSQL" as DB {
      [users]
      [expenses]
      [budgets]
      [incomes]
      [savings_goals]
    }
    
    ' Utilities
    package "Utilities" {
      component "Database Connection" as DBConn
    }
  }
}

' Define External Dependencies
node "External Libraries" {
  [React Router]
  [Axios]
  [Recharts]
  [JWT]
  [bcrypt]
  [Sequelize]
  [Express]
  [pg (node-postgres)]
}

' Define the relationships between components

' Frontend relationships
AppJS --> Router : routes
Router --> DashboardComp : renders
Router --> ExpenseTrackerComp : renders
Router --> IncomeGoalsComp : renders
Router --> AuthComps : renders

DashboardComp --> ChartsComp : uses
ExpenseTrackerComp --> ChartsComp : uses
DashboardComp --> CleanupComp : contains

AuthComps --> AuthCtx : uses
DashboardComp --> AuthCtx : uses
ExpenseTrackerComp --> AuthCtx : uses
IncomeGoalsComp --> AuthCtx : uses

AuthCtx --> APIService : calls
DashboardComp --> APIService : calls
ExpenseTrackerComp --> APIService : calls
IncomeGoalsComp --> APIService : calls
CleanupComp --> APIService : calls

DashboardComp --> StorageUtils : uses
DashboardComp --> HelperFuncs : uses
ExpenseTrackerComp --> HelperFuncs : uses
IncomeGoalsComp --> HelperFuncs : uses

' Backend relationships
ExpressApp --> Routes : uses
Routes --> AuthController : delegates to
Routes --> ExpenseController : delegates to

AuthController --> UserModel : manipulates
ExpenseController --> ExpenseModel : manipulates
ExpenseController --> BudgetModel : manipulates
ExpenseController --> IncomeModel : manipulates
ExpenseController --> SavingsModel : manipulates
ExpenseController --> EconomeService : uses

Routes --> AuthMiddleware : uses

UserModel --> DB : queries
ExpenseModel --> DB : queries
BudgetModel --> DB : queries
IncomeModel --> DB : queries
SavingsModel --> DB : queries

DBConn --> DB : connects

' External dependencies relationships
AuthController --> [JWT] : uses
AuthController --> [bcrypt] : uses
UserModel --> [Sequelize] : extends
ExpenseModel --> [Sequelize] : extends
BudgetModel --> [Sequelize] : extends
IncomeModel --> [Sequelize] : extends
SavingsModel --> [Sequelize] : extends
ExpressApp --> [Express] : instantiates
DBConn --> [pg (node-postgres)] : uses
APIService --> [Axios] : uses
Router --> [React Router] : uses
ChartsComp --> [Recharts] : uses

' Data flows
AppJS -(0- AuthCtx : user state
APIService -(0- Routes : HTTP requests
Routes -(0- UserModel : user data
Routes -(0- ExpenseModel : expense data
AuthMiddleware -(0- AuthController : token validation

@enduml