{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "pyFL1Mqky1lQb_AMVRnjm",
      "type": "text",
      "x": 222.52802580911623,
      "y": -50.37042050624274,
      "width": 959.99951171875,
      "height": 125,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a0",
      "roundness": null,
      "seed": 1477592170,
      "version": 524,
      "versionNonce": 1500523114,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1744871091355,
      "link": null,
      "locked": false,
      "text": "Backend - Frontend Connnection Understanding:\n    -lets first understand how the frontend and backend connect the key things to focus on are: \n        *api communication \n        *database connection \n        *State manegement",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Backend - Frontend Connnection Understanding:\n    -lets first understand how the frontend and backend connect the key things to focus on are: \n        *api communication \n        *database connection \n        *State manegement",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "4ZO1L61-pWEnlXScrflOc",
      "type": "text",
      "x": 234.7550048828125,
      "y": 448.1229248046875,
      "width": 1604.8587646484375,
      "height": 275,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a1",
      "roundness": null,
      "seed": 1158885686,
      "version": 948,
      "versionNonce": 554352426,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1744870704010,
      "link": null,
      "locked": false,
      "text": "Backend architecture ( node.js,express,postgresql):\nmy applicaiton implements a lyered architecture:\nAPI Layer: routes defined in routes.js that map HTTP methods to controller functions\nController Layer: in controller.js, busioness logic for handling requests and responses \nData Access Layer: the db.js file creates a connection pool to postgresQL\nService LAyer: there seems to be a services.js file that likely contains reuasable business logic\n\n\nSeperation of concerns is a fundamental sofftware engineering principle, each componenet has a single responsibility making the code more amintabinable and testable\n\nthe application foes use both raw sql queries via the pg library and it also includes sequelize orm configuration in database.js ",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Backend architecture ( node.js,express,postgresql):\nmy applicaiton implements a lyered architecture:\nAPI Layer: routes defined in routes.js that map HTTP methods to controller functions\nController Layer: in controller.js, busioness logic for handling requests and responses \nData Access Layer: the db.js file creates a connection pool to postgresQL\nService LAyer: there seems to be a services.js file that likely contains reuasable business logic\n\n\nSeperation of concerns is a fundamental sofftware engineering principle, each componenet has a single responsibility making the code more amintabinable and testable\n\nthe application foes use both raw sql queries via the pg library and it also includes sequelize orm configuration in database.js ",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "gliUJ8UIagz_gDf9Hs7NE",
      "type": "text",
      "x": 234.39046585171968,
      "y": 123.20506119985339,
      "width": 1298.839111328125,
      "height": 300,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": null,
      "seed": 1940965354,
      "version": 887,
      "versionNonce": 195732650,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1744871086388,
      "link": null,
      "locked": false,
      "text": "Frontend architecture ( react) \nthe frontend uses react with a component based architecture: \ncomponent structre: each function peice of the UI (dashboard,expensetracker,etc0 is a seperate component\nlocal stat management: components use react hooks( usestate,useeffect) for local state \nprops based data flow: components recieve data through props( this would maybe exoplain the persistence issues) \napi integratio: the api.js file provides a centralized way to make api calls using axios \n\nworth noting the dashboard component is particularluy interesting bevause is shows a common pattern ion the financial applications: \nit recieves data as props? \nit calculates derived values (savings budget percentages) \nit delegates rendering to specilaized chart components\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Frontend architecture ( react) \nthe frontend uses react with a component based architecture: \ncomponent structre: each function peice of the UI (dashboard,expensetracker,etc0 is a seperate component\nlocal stat management: components use react hooks( usestate,useeffect) for local state \nprops based data flow: components recieve data through props( this would maybe exoplain the persistence issues) \napi integratio: the api.js file provides a centralized way to make api calls using axios \n\nworth noting the dashboard component is particularluy interesting bevause is shows a common pattern ion the financial applications: \nit recieves data as props? \nit calculates derived values (savings budget percentages) \nit delegates rendering to specilaized chart components\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "n1cd5ntTzf4ERm1vwxWFW",
      "type": "text",
      "x": -573.2814542263718,
      "y": -150.73237615446044,
      "width": 891.3729248046875,
      "height": 103.63520522793124,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a3",
      "roundness": null,
      "seed": 319654570,
      "version": 509,
      "versionNonce": 1343667766,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1744871293243,
      "link": null,
      "locked": false,
      "text": "implementing a react context api would provide the best balance of power and simpliciity it would allow me to :\nshare state between components without prop drilling \ncentralize api calls and data fetching \npersist state during tab navigation \nmaintiain user data even after page refreshes ( with localstorage integration)  ",
      "fontSize": 16.581632836468998,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "implementing a react context api would provide the best balance of power and simpliciity it would allow me to :\nshare state between components without prop drilling \ncentralize api calls and data fetching \npersist state during tab navigation \nmaintiain user data even after page refreshes ( with localstorage integration)  ",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}